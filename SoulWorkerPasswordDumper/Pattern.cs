namespace SoulWorkerPasswordDumper;

internal sealed record Pattern
{
    internal static byte[] Header { get; } = new byte[]
    {
        0x55, 0x8B, 0xEC, 0x6A, 0xFF, 0x68, UndO, UndO,
        UndO, UndO, 0x64, 0xA1, 0x00, 0x00, 0x00, 0x00,
        0x50,
    };

    internal static byte[][] BodyVariant { get; } = new byte[][]
    {
        new byte[]
        {
            0x64, 0x89, 0x25, 0x00, 0x00, 0x00, 0x00, 0x68,
            UndO, UndO, UndO, UndO, 0xB9, UndO, UndO, UndO,
            UndO, 0xE8, UndO, UndO, UndO, UndO, 0x90,
        },
        new byte[]
        {
            0xC7, 0x45, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x68,
            UndO, UndO, UndO, UndO, 0xB9, UndO, UndO, UndO,
            UndO, 0xE8, UndO, UndO, UndO, UndO, 0x90,
        },
        new byte[]
        {
            0xC6, 0x45, 0xFC, UndO, 0x68, UndO, UndO, UndO,
            UndO, 0xB9, UndO, UndO, UndO, UndO, 0xE8, UndO,
            UndO, UndO, UndO, 0x90,
        },
    };

    internal static byte[] Footer { get; } = new byte[]
    {
        0xC7, 0x45, 0xFC, 0xFF, 0xFF, 0xFF, 0xFF, 0x68,
        UndO, UndO, UndO, UndO, 0xE8, UndO, UndO, UndO,
        UndO, 0x83, 0xC4, 0x04, 0x8B, 0x4D, 0xF4, 0x64,
        0x89, 0x0D, 0x00, 0x00, 0x00, 0x00, 0x8B, 0xE5,
        0x5D, 0xC3
    };

    //internal static byte[] Names { get; } = new byte[]
    //{
    //    0x55, 0x8B, 0xEC, 0x6A, 0xFF, 0x68, UndO, UndO,
    //    UndO, UndO, 0x64, 0xA1, 0x00, 0x00, 0x00, 0x00,
    //    0x50, 0x64, 0x89, 0x25, 0x00, 0x00, 0x00, 0x00,
    //    0x68, 0x58, 0xF9, 0x94, 0x01, 0xB9, UndO, UndO,
    //    UndO, UndO, 0xE8, UndO, UndO, UndO, UndO, 0x90,
    //    0xC7, 0x45, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x68,
    //    0x50, 0xF9, 0x94, 0x01, 0xB9, UndO, UndO, UndO,
    //    UndO, 0xE8, UndO, UndO, UndO, UndO, 0x90, 0xC6,
    //    0x45, 0xFC, 0x01, 0x68, 0x48, 0xF9, 0x94, 0x01,
    //    0xB9, UndO, UndO, UndO, UndO, 0xE8, UndO, UndO,
    //    UndO, UndO, 0x90, 0xC6, 0x45, 0xFC, 0x02, 0x68,
    //    0x40, 0xF9, 0x94, 0x01, 0xB9, UndO, UndO, UndO,
    //    UndO, 0xE8, UndO, UndO, UndO, UndO, 0x90, 0xC6,
    //    0x45, 0xFC, 0x03, 0x68, 0x38, 0xF9, 0x94, 0x01,
    //    0xB9, UndO, UndO, UndO, UndO, UndO, UndO, UndO,
    //    UndO, 0x00, 0x90, 0xC6, 0x45, 0xFC, 0x04, 0x68,
    //    0x30, 0xF9, 0x94, 0x01, 0xB9, UndO, UndO, UndO,
    //    UndO, 0xE8, UndO, UndO, UndO, UndO, 0x90, 0xC6,
    //    0x45, 0xFC, 0x05, 0x68, 0x28, 0xF9, 0x94, 0x01,
    //    0xB9, UndO, UndO, UndO, UndO, 0xE8, UndO, UndO,
    //    UndO, UndO, 0x90, 0xC6, 0x45, 0xFC, 0x06, 0x68,
    //    0x20, 0xF9, 0x94, 0x01, 0xB9, UndO, UndO, UndO,
    //    UndO, 0xE8, UndO, UndO, UndO, UndO, 0x90, 0xC6,
    //    0x45, 0xFC, 0x07, 0x68, 0x18, 0xF9, 0x94, 0x01,
    //    0xB9, UndO, UndO, UndO, UndO, UndO, UndO, UndO,
    //    UndO, 0x00, 0x90, 0xC6, 0x45, 0xFC, 0x08, 0x68,
    //    0x10, 0xF9, 0x94, 0x01, 0xB9, UndO, UndO, UndO,
    //    UndO, 0xE8, UndO, UndO, UndO, UndO, 0x90, 0xC6,
    //    0x45, 0xFC, 0x09, 0x68, 0x08, 0xF9, 0x94, 0x01,
    //    0xB9, UndO, UndO, UndO, UndO, 0xE8, UndO, UndO,
    //    UndO, UndO, 0x90, 0xC6, 0x45, 0xFC, 0x0A, 0x68,
    //    0x00, 0xF9, 0x94, 0x01, 0xB9, UndO, UndO, UndO,
    //    UndO, 0xE8, UndO, UndO, UndO, UndO, 0x90, 0xC6,
    //    0x45, 0xFC, 0x0B, 0x68, 0xF8, 0xF8, 0x94, 0x01,
    //    0xB9, UndO, UndO, UndO, UndO, UndO, UndO, UndO,
    //    UndO, 0x00, 0x90, 0xC6, 0x45, 0xFC, 0x0C, 0x68,
    //    0xF0, 0xF8, 0x94, 0x01, 0xB9, UndO, UndO, UndO,
    //    UndO, 0xE8, UndO, UndO, UndO, UndO, 0x90, 0xC6,
    //    0x45, 0xFC, 0x0D, 0x68, 0xE8, UndO, UndO, UndO,
    //    UndO, 0xA8, 0xF5, 0xB1, 0x01, 0xE8, UndO, UndO,
    //    UndO, UndO, 0x90, 0xC6, 0x45, 0xFC, 0x0E, 0x68,
    //    0xE0, 0xF8, 0x94, 0x01, 0xB9, UndO, UndO, UndO,
    //    UndO, 0xE8, UndO, UndO, UndO, UndO, 0x90, 0xC7,
    //    0x45, 0xFC, 0xFF, 0xFF, 0xFF, 0xFF, 0x68, 0x70,
    //    0xFC, 0x66, 0x01, 0xE8, UndO, UndO, UndO, UndO,
    //    0x83, 0xC4, 0x04, 0x8B, 0x4D, 0xF4, 0x64, 0x89,
    //    0x0D, 0x00, 0x00, 0x00, 0x00, 0x8B, 0xE5, 0x5D,
    //    0xC3
    //};

    public const byte UndO = byte.MinValue;
}
